(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{62:function(t,n,e){"use strict";e.r(n);var a=e(0),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"优化写法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化写法"}},[t._v("#")]),t._v(" 优化写法")]),t._v(" "),e("h2",{attrs:{id:"_1、switch-case-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、switch-case-优化"}},[t._v("#")]),t._v(" 1、switch case 优化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('testFunction(key) {\n      switch (key) {\n        case 1:\n          this.test = "第一";\n          break;\n        case 2:\n          this.test = "第二";\n          break;\n        case 3:\n          this.test = "第三";\n          break;\n        default:\n          this.test = "第四";\n          break;\n      }\n      return this.test;\n    },\n')])])]),e("p",[t._v("这样是最常见的写法，我们可以利用 ES6 中的 Map 对象进行处理")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('handlerLogic1(status) {\n      const actions = new Map([\n        [1, "第一" // 或者是一个函数],\n        [2, "第二"],\n        [3, "第三"],\n        ["default", "第四"]\n      ]);\n      let action = actions.get(status) || actions.get("default");\n      this.test = action;\n    }\n')])])]),e("p",[t._v("在 Map 中参数可以是函数，也可以是纯数组。")]),t._v(" "),e("h2",{attrs:{id:"_2、数组去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、数组去重"}},[t._v("#")]),t._v(" 2、数组去重")]),t._v(" "),e("p",[t._v("方法一、")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const uniqueWithSpreadOperator = [...new Set(cars)];\n")])])]),e("p",[t._v("方法二、")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" Array.prototype.unique = function() {\n        const tmp = new Map();\n        return this.filter(item => {\n          return !tmp.has(item) && tmp.set(item, 1);\n        });\n      };\n      let array = [{ 1: 0 }, { 2: 3 }, { 2: 3 }];\n      array.unique();\n")])])]),e("p",[t._v("方法三、")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Array.prototype.unique = function() {\n    return this.sort().reduce((init, current) => {\n        if (init.length === 0 || init[init.length - 1] !== current) {\n            init.push(current);\n        }\n        return init;\n    }, []);\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n")])])]),e("p",[t._v("方法四、")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Array.prototype.unique = function() {\n    const newArray = [];\n    this.forEach(item => {\n        if (!newArray.includes(item)) {\n            newArray.push(item);\n        }\n    });\n    return newArray;\n}\nvar array = [1, 2, 3, 43, 45, 1, 2, 2, 4, 5];\narray.unique();\n")])])]),e("h2",{attrs:{id:"_3、重新组装对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、重新组装对象"}},[t._v("#")]),t._v(" 3、重新组装对象")]),t._v(" "),e("p",[e("strong",[t._v("根据对象的值重新组装对象")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' const cities = [\n        { name: "Paris", visited: "no" },\n        { name: "Lyon", visited: "no" },\n        { name: "Marseille", visited: "yes" },\n        { name: "Rome", visited: "yes" },\n        { name: "Milan", visited: "no" },\n        { name: "Palermo", visited: "yes" },\n        { name: "Genoa", visited: "yes" },\n        { name: "Berlin", visited: "no" },\n        { name: "Hamburg", visited: "yes" },\n        { name: "New York", visited: "yes" }\n      ];\n\n      const result = cities.reduce((accumulator, item) => {\n        console.log(accumulator);\n        return {\n          ...accumulator,\n          [item.name]: item.visited\n        };\n      }, {});\n\n      console.log(result);\n')])])]),e("p",[e("strong",[t._v("有条件的对象属性")]),e("br"),t._v("\n优化原因：不需要根据一个条件写两个不同的对象，可根据短路运算符进行判断")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' const getUsers = dj => {\n        return {\n          name: "张三",\n          id: 1,\n          ...(dj && {\n            names: "李四",\n            ids: 2\n          })\n        };\n      };\n      const s = getUsers(true);\n      console.log(s);\n      const a = getUsers(false);\n      console.log(a);\n')])])]),e("p",[e("strong",[t._v("一个对象解构成多个对象")]),e("br"),t._v("\n将一个对象解构成多个对象，有时候一个对象包含很多属性，而我们只需要其中的几个，这里可以使用解构方式来提取我们需要的属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(' const currentRequest = {\n        index: 0,\n        size: 30,\n        systemType: 1,\n        indicator: "指标",\n        system: "模型",\n        version: "明细",\n        time: 2019,\n        region: "成都"\n      };\n      let systemdata = {},\n        indicatordata = {};\n      ({\n        index: systemdata.index,\n        system: systemdata.system,\n        size: systemdata.size,\n        ...indicatordata\n      } = currentRequest);\n      console.log(systemdata);\n      console.log(indicatordata);\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);