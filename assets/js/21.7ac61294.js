(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{72:function(a,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"ts基础语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ts基础语法"}},[a._v("#")]),a._v(" TS基础语法")]),a._v(" "),t("h2",{attrs:{id:"基础类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[a._v("#")]),a._v(" 基础类型")]),a._v(" "),t("h4",{attrs:{id:"数据声明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据声明"}},[a._v("#")]),a._v(" 数据声明")]),a._v(" "),t("p",[a._v("1、布尔类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let judge: boolean = false;\n")])])]),t("p",[a._v("2、数字类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let count: number = 123\n")])])]),t("p",[a._v("3、字符串类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let text: string = "何元鹏" \n')])])]),t("p",[a._v("4、数组类型"),t("br"),a._v("\n在TypeScript中对数组的定义分为两种")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let arrayData: number[] = [1,2,3]\n// 或者\nlet arrayData: Array<number> = [1,2,3]\n")])])]),t("p",[a._v("5、元组类型"),t("br"),a._v("\n元组类型是表示一个已知数量和类型的数组，各元素的数据类型可以不同。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let arrayData: [number,string];\narrayData = [1,"帅哥"]\n\n')])])]),t("p",[a._v("在元组中数据的存储也必须符合元组中声明的数据类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('arrayData[3]="美女"\n// "美女"属于字符串类型，所以可以进行赋值\narrayData[4] = true;\n// true属于布尔类型在元组中并未声明所以不能属于，赋值失败\n')])])]),t("p",[a._v("同样在使用函数方法的时候也是一样的效果，如果在未声明数组类型的时候是不能使用数组方法的。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(arrayData[2].toString()) // ok\nconsole.log(arrayData[1].substr(0)) // error\n")])])]),t("p",[a._v("当访问一个越界的元素，我们会使用到联合类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(arrayData[5].toString()) // ok 因为在上面声明的araayData中本身就存在string类型\n\n")])])]),t("p",[a._v("6、枚举类型"),t("br"),a._v("\nenum类型是JavaScript标准数据类型的一个补充，如同其他语言中的作用，使用枚举类型可以为一组数值赋予友好的名称")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("enum color {one,two,three}\nlet one: color =  color.one\n// one=0:因为在未赋值的情况下,默认是从0开始的。如果已经手动赋值，那么就等于当前对应的值。\n")])])]),t("p",[a._v("当然在enum中也可以使用值去寻找当前的值对应的名称，如同知道value寻找key，如果有两个key对应的value值相同则覆盖取后者。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("enum Color {Red , Green = 12, Blue = 12}\nlet colorName: string[] = [Color[12]]; \nconsole.log(colorName);   // Blue\n\n")])])]),t("p",[a._v("7、Any类型"),t("br"),a._v("\nAny类型使用于我们在编程阶段还不清楚变量的数据类型时使用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let notSure: any = 4;\nnotSure = "maybe a string instead";\nnotSure = false; // okay, definitely a boolean\nconsole.log(notSure) // false\n')])])]),t("p",[a._v("在对现有代码进行改写的时候，any类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为 Object有相似的作用，就像它在其它语言中那样。 但是 Object类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let notSure: any = 4;\nnotSure.ifItExists(); // okay, ifItExists might exist at runtime\nnotSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)\n")])])]),t("p",[a._v("Any也可以使用在数组上面")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let list: any[] = [1, true, "free"];\n\nlist[1] = 100;\n// [1,100,"false"]\n')])])]),t("p",[a._v("8、Object类型\nobject表示非原始类型，也就是除number，string，boolean，symbol，null或undefined之外的类型。")]),a._v(" "),t("p",[a._v("使用object类型，就可以更好的表示像Object.create这样的API")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('declare function create(o: object | null): void;\n\ncreate({ prop: 0 }); // OK\ncreate(null); // OK\n\ncreate(42); // Error\ncreate("string"); // Error\ncreate(false); // Error\ncreate(undefined); // Error\n')])])])])}),[],!1,null,null,null);e.default=r.exports}}]);