(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{75:function(t,v,_){"use strict";_.r(v);var a=_(0),i=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git-使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-使用"}},[t._v("#")]),t._v(" Git 使用")]),t._v(" "),_("p",[t._v("Workspace：工作区\nIndex ：暂存区\nRepository：本地仓库\nRemote：远程仓库")]),t._v(" "),_("p",[t._v("下面我们逐步介绍我们 Git 的使用\n"),_("img",{attrs:{src:t.$withBase("/tupian1.png"),alt:"foo"}})]),t._v(" "),_("h2",{attrs:{id:"建立-git-仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#建立-git-仓库"}},[t._v("#")]),t._v(" 建立 Git 仓库")]),t._v(" "),_("p",[t._v("查看 Git 版本信息：git -v")]),t._v(" "),_("p",[t._v("初始化仓库：git init")]),t._v(" "),_("p",[t._v("下载远程代码（及从远程库导文件到本地仓库）： git clone url(远程地址)")]),t._v(" "),_("p",[t._v("查看远程库地址：  git remote -v")]),t._v(" "),_("h2",{attrs:{id:"设置用户信息（及登录信息）"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设置用户信息（及登录信息）"}},[t._v("#")]),t._v(" 设置用户信息（及登录信息）")]),t._v(" "),_("p",[t._v("查看当前 Git 的配置信息：\ngit config --list")]),t._v(" "),_("p",[t._v('邮箱信息：\ngit config --global user.email "邮箱地址"')]),t._v(" "),_("p",[t._v('用户名信息：\ngit config --global user.name "用户名"')]),t._v(" "),_("p",[_("em",[t._v("项目中遇到的实际问题：配置信息完成后，代码 push 时出现的问题。")]),t._v(" "),_("strong",[t._v("注：Git 用户权限错误")])]),t._v(" "),_("blockquote",[_("p",[t._v("修改 config 文件，在请求地址前面加上"),_("strong",[t._v("用户名：用户密码@请求地址")])])]),t._v(" "),_("p",[t._v("恭喜你到这一步，你已经顺利的完成了 git 仓库的建立。接下来我们学习一下如何上传远程库和拉取远程代码")]),t._v(" "),_("h2",{attrs:{id:"信息查看"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#信息查看"}},[t._v("#")]),t._v(" 信息查看")]),t._v(" "),_("p",[t._v("显示提交信息:\ngit show")]),t._v(" "),_("p",[t._v("显示当前分支的最近几次提交:\ngit reflog")]),t._v(" "),_("p",[t._v("显示当前分支的版本历史:\ngit log")]),t._v(" "),_("p",[t._v("显示有变更的文件:\ngit status")]),t._v(" "),_("h2",{attrs:{id:"分支操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),_("p",[t._v("查看所有本地分支:")]),t._v(" "),_("p",[t._v("git branch")]),t._v(" "),_("p",[t._v("查看所有远程分支：")]),t._v(" "),_("p",[t._v("git branch -r")]),t._v(" "),_("p",[t._v("查看所有tag")]),t._v(" "),_("p",[t._v("git tag")]),t._v(" "),_("p",[t._v("查看所有本地分支和远程分支:")]),t._v(" "),_("p",[t._v("git branch -a")]),t._v(" "),_("p",[t._v("新建分支（但依然停留在当前分支）：")]),t._v(" "),_("p",[t._v("git branch 分支名")]),t._v(" "),_("p",[t._v("删除分支：")]),t._v(" "),_("p",[t._v("git branch -d 分支名")]),t._v(" "),_("p",[t._v("删除当前分支外的所有分支：")]),t._v(" "),_("p",[t._v("git branch | xargs git branch -d")]),t._v(" "),_("p",[t._v("删除分支名包含指定'dev'的分支：")]),t._v(" "),_("p",[t._v("git branch | grep 'dev*' | xargs git branch -d")]),t._v(" "),_("blockquote",[_("p",[t._v("命令解析：|\n管道命令，用于将一串命令串联起来。前面命令的输出可以作为后面命令的输入。"),_("br"),t._v("\ngit branch"),_("br"),t._v("\n用于列出本地所有分支。"),_("br"),t._v("\ngrep"),_("br"),t._v("\n搜索过滤命令。使用正则表达式搜索文本，并把匹配的行打印出来。"),_("br"),t._v("\nxargs"),_("br"),t._v("\n参数传递命令。用于将标准输入作为命令的参数传给下一个命令。")])]),t._v(" "),_("p",[t._v("新建分支（并切换到新建的分支上）：")]),t._v(" "),_("p",[t._v("git checkout -b 分支名")]),t._v(" "),_("p",[t._v("切换分支：")]),t._v(" "),_("p",[t._v("git checkout 分支名")]),t._v(" "),_("p",[t._v("切换tag：")]),t._v(" "),_("p",[t._v("git checkout tag名")]),t._v(" "),_("p",[t._v("合并分支：")]),t._v(" "),_("p",[t._v("git merge 分支名 （需要合并的分支名）")]),t._v(" "),_("p",[t._v("将本地仓库关联到新建的远程仓库上")]),t._v(" "),_("p",[t._v("git remote add origin 远程仓库地址")]),t._v(" "),_("p",[t._v("拉去指定远程分支")]),t._v(" "),_("p",[t._v("git clone -b 分支名  远程仓库地址")]),t._v(" "),_("h2",{attrs:{id:"commit操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#commit操作"}},[t._v("#")]),t._v(" commit操作")]),t._v(" "),_("p",[_("strong",[t._v("commit对比")]),_("br"),t._v("\n比较两个commit-id之间的差异:"),_("br"),t._v("\ngit diff [commit-id] [commit-id]")]),t._v(" "),_("p",[_("strong",[t._v("commit合并")]),_("br"),t._v("\n查找到需要合并的 commit 提交 Id:"),_("br"),t._v("\ngit cherry-pick commit-id")]),t._v(" "),_("p",[_("strong",[t._v("合并多个commit")]),t._v("\n$ git rebase -i [开始点commit-id] [结束点commit-id]")]),t._v(" "),_("h2",{attrs:{id:"代码暂存处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码暂存处理"}},[t._v("#")]),t._v(" 代码暂存处理")]),t._v(" "),_("p",[t._v("git stash 代码暂存\ngit stash list 获取暂存列表\ngit stash pop 获取暂存代码")]),t._v(" "),_("h2",{attrs:{id:"代码回滚"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码回滚"}},[t._v("#")]),t._v(" 代码回滚")]),t._v(" "),_("blockquote",[_("p",[t._v("固定回滚到某个 commit 点：\ngit reset id 号（commit 提交的 id 号）")])]),t._v(" "),_("h2",{attrs:{id:"版本节点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本节点"}},[t._v("#")]),t._v(" 版本节点")]),t._v(" "),_("p",[t._v("创建 tag 节点：\n（在某个 commit 上打 tag）\ngit tag tag 名 commit 的 ID")]),t._v(" "),_("p",[t._v("本地 tag 推送到线上：\ngit push origin tag 名")]),t._v(" "),_("p",[t._v("删除 tag 节点：\ngit tag -d tag 名")]),t._v(" "),_("p",[t._v("删除远程分支\ngit push origin :refs/tags/tag 名")]),t._v(" "),_("h2",{attrs:{id:"上传代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#上传代码"}},[t._v("#")]),t._v(" 上传代码")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("当你已经完成本地的开发任务时，需要上传代码就需要进行一下命令操作了。\n查看当前修改的文件：\ngit status")])]),t._v(" "),_("li",[_("p",[t._v("将文件添加到暂存区：\ngit add 文件名 （如果用“.”那么则表示所有修改的文件）")])]),t._v(" "),_("li",[_("p",[t._v('将修改文件提交到本地仓库并添加修改备注：\ngit commit -m"备注内容"')])])]),t._v(" "),_("hr"),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("注：")]),t._v(" "),_("em",[t._v("在 commit 中我实际的项目引入了 GitCZ 这个工具管理，主要用于提交类型管理")]),t._v(" > "),_("strong",[t._v("git cz 使用")]),t._v("\nGitCZ 的使用只是我开发中的一些小小习惯而已，所以不强制要求大家都必须使用。")])]),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v(" 1. feat：新功能（feature）\n 2. fix：修补bug\n 3. docs：文档（documentation）\n 4. style： 格式（不影响代码运行的变动）\n 5. refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n 6. test：增加测试\n 7. chore：构建过程或辅助工具的变动\n\n")])])]),_("hr"),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[_("p",[t._v("拉取一下远程分支代码避免代码冲突：\ngit pull origin 远程分支名（一般拉取主分支 master）")])]),t._v(" "),_("li",[_("p",[t._v("上传本地代码：\ngit push origin 远程分支名")])])]),t._v(" "),_("h2",{attrs:{id:"拉取代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#拉取代码"}},[t._v("#")]),t._v(" 拉取代码")]),t._v(" "),_("blockquote",[_("p",[t._v("获取远程分支代码：\ngit pull origin master(一般拉取都是主分支获取直接每天更新的开发分支)")])]),t._v(" "),_("h2",{attrs:{id:"打印版本"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#打印版本"}},[t._v("#")]),t._v(" 打印版本")]),t._v(" "),_("ul",[_("li",[t._v("打印所有标签\ngit tag")]),t._v(" "),_("li",[t._v("打印符合检索条件的标签\ngit tag -l 1."),_("em",[t._v(".")])]),t._v(" "),_("li",[t._v("查看对应标签状态\ngit checkout 1.0.0")]),t._v(" "),_("li",[t._v("创建轻量标签\ngit tag 1.0.0-light")]),t._v(" "),_("li",[t._v('创建带备注标签(推荐)\ngit tag -a 1.0.0 -m "这是备注信息"')]),t._v(" "),_("li",[t._v('针对特定 commit 版本 SHA 创建标签\ngit tag -a 1.0.0 0c3b62d -m "这是备注信息"')]),t._v(" "),_("li",[t._v("删除标签(本地)\ngit tag -d 1.0.0")]),t._v(" "),_("li",[t._v("发送所有\ngit push origin --tags")]),t._v(" "),_("li",[t._v("指定版本发送\ngit push origin 1.0.0")]),t._v(" "),_("li",[t._v("Git 版本 > V1.7.0\ngit push origin --delete 1.0.0")]),t._v(" "),_("li",[t._v("旧版本 Git\ngit push origin :refs/tags/1.0.0")])]),t._v(" "),_("h2",{attrs:{id:"git-常用问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-常用问题"}},[t._v("#")]),t._v(" Git 常用问题")]),t._v(" "),_("h4",{attrs:{id:"_1、拉取代码报错：you-have-not-concluded-your-merge"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、拉取代码报错：you-have-not-concluded-your-merge"}},[t._v("#")]),t._v(" 1、拉取代码报错：You have not concluded your merge")]),t._v(" "),_("p",[t._v("错误截图："),_("img",{attrs:{src:t.$withBase("/cuowu1.jpeg"),alt:"foo"}})]),t._v(" "),_("p",[t._v("解决方案：")]),t._v(" "),_("p",[_("strong",[t._v("一、保留你本地的修改")])]),t._v(" "),_("p",[t._v("git merge --abort")]),t._v(" "),_("p",[t._v("git reset --merge")]),t._v(" "),_("p",[_("strong",[t._v("二、抛弃本地的修改")])]),t._v(" "),_("p",[t._v("git fetch --all")]),t._v(" "),_("p",[t._v("git reset --hard origin/master")]),t._v(" "),_("p",[t._v("git fetch")]),t._v(" "),_("h4",{attrs:{id:"_2、上传代码报错-failed-to-push-some-refs-to"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、上传代码报错-failed-to-push-some-refs-to"}},[t._v("#")]),t._v(" 2、上传代码报错: failed to push some refs to")]),t._v(" "),_("p",[t._v("报错截图："),_("img",{attrs:{src:t.$withBase("/cuowu2.png"),alt:"foo"}}),t._v(" "),_("strong",[t._v("解决方案：")])]),t._v(" "),_("p",[t._v("先拉去一次：git pull origin heyp")]),t._v(" "),_("p",[t._v("再次提交：git push origin heyp")]),t._v(" "),_("p",[_("em",[t._v("若是还未解决")])]),t._v(" "),_("p",[t._v("git pull --rebase origin heyp")]),t._v(" "),_("p",[t._v("git push -u origin heyp")]),t._v(" "),_("h2",{attrs:{id:"yarn-命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-命令"}},[t._v("#")]),t._v(" yarn 命令")]),t._v(" "),_("p",[t._v("版本查看："),_("strong",[t._v("yarn -v")])]),t._v(" "),_("p",[t._v("建立新工程 ："),_("strong",[t._v("yarn init")])]),t._v(" "),_("p",[t._v("添加依赖包："),_("strong",[t._v("yarn add")])]),t._v(" "),_("p",[t._v("安装全局依赖包："),_("strong",[t._v("yarn global add")])]),t._v(" "),_("p",[t._v("只在开发环境安装依赖包："),_("strong",[t._v("yarn add XXX --dev")])]),t._v(" "),_("p",[t._v("更新依赖包："),_("strong",[t._v("yarn upgrade")])]),t._v(" "),_("p",[t._v("移除依赖包："),_("strong",[t._v("yarn remove")])]),t._v(" "),_("p",[t._v("脚本运行："),_("strong",[t._v("yarn serve")])]),t._v(" "),_("p",[t._v("查看依赖包列表："),_("strong",[t._v("yarn list")])]),t._v(" "),_("p",[t._v("项目打包："),_("strong",[t._v("yarn build")])]),t._v(" "),_("hr"),t._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("# 生成 package.json 文件（需要手动选择配置）\nyarn init\n\n# 生成 package.json 文件（使用默认配置）\nyarn init -y\n\n# 一键安装 package.json 下的依赖包\nyarn\n\n# 在项目中安装包名为 xxx 的依赖包（配置在 dependencies 下）,同时 yarn.lock 也会被更新\nyarn add xxx\n\n# 在项目中安装包名为 xxx 的依赖包（配置在配置在 devDependencies 下）,同时 yarn.lock 也会被更新\nyarn add xxx --dev\n\n# 全局安装包名为 xxx 的依\nyarn global add xxx\n\n# 运行 package.json 中 scripts 下的命令\nyarn xxx\n")])])]),_("h2",{attrs:{id:"cli3-使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cli3-使用"}},[t._v("#")]),t._v(" cli3 使用")]),t._v(" "),_("p",[_("strong",[t._v("npm install -g @vue/cli")])]),t._v(" "),_("p",[_("strong",[t._v("或者 yarn 安装")])]),t._v(" "),_("p",[_("strong",[t._v("yarn global add @vue/cli")])]),t._v(" "),_("p",[t._v("个人建议 yarn 安装（可视化操作）")]),t._v(" "),_("blockquote",[_("p",[t._v("vue ui")])])])}),[],!1,null,null,null);v.default=i.exports}}]);